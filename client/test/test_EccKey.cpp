//
// Created by qwerty on 2024-04-15.
//
#include "gtest/gtest.h"
#include "ecc_key.hpp"


using namespace security;

class CEccPublicKeyTest : public ::testing::Test
{
protected:
    // private: 3031020101042022385c68e112601a0314b333f3bd8423cb2975cf1c8bf757b6c91bbf62fc04a9a00a06082a8648ce3d0301
    std::vector<uint8_t> m_ValidDer = {
            0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a,
            0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x17, 0x15, 0xaf, 0x5e, 0xbb,
            0xb6, 0xd6, 0x76, 0xe3, 0x6b, 0xcc, 0xe5, 0x30, 0xb2, 0xaf, 0xb8, 0xc6, 0x38, 0x09, 0x7e, 0xc1,
            0x8f, 0x29, 0xae, 0x6f, 0x14, 0x9e, 0xfb, 0x38, 0xe8, 0x09, 0x34, 0x8f, 0xc2, 0xed, 0x87, 0xe0,
            0x6d, 0xff, 0x16, 0x0c, 0x5e, 0x4e, 0x5d, 0x75, 0xcc, 0xfa, 0xab, 0x0a, 0x1f, 0xa9, 0x66, 0x22,
            0x45, 0xb4, 0xd6, 0xe5, 0x7f, 0xc5, 0x31, 0xe0, 0xd3, 0xe3, 0xcd
    };
    std::unique_ptr<CEccPublicKey> m_pKey = nullptr;
    
    virtual void SetUp() override
    {
        m_pKey = std::make_unique<CEccPublicKey>(m_ValidDer);
    }
};
TEST_F(CEccPublicKeyTest, Move_Constructor)
{
    CEccPublicKey key2(std::move(*m_pKey));
    
    std::vector<byte> savedDer{};
    std::function<bool(std::vector<byte>&&)> mockSave { [&savedDer](std::vector<byte>&& data)
    {
        savedDer.append_range(data);
        return true;
    } };
    
    EXPECT_TRUE(key2.write_to_disk(mockSave));
    
    ASSERT_EQ(savedDer.size(), m_ValidDer.size());
    for(size_t i = 0u; i < savedDer.size(); ++i)
        EXPECT_EQ(savedDer[i], m_ValidDer[i]);
}